// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InstanceStatus {
  ACTIVE
  DRAINING
  TERMINATED
}

enum RequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

model WorkerInstance {
  id           String         @id @default(uuid())
  instanceId   String         @unique
  status       InstanceStatus @default(ACTIVE)
  lastActivity DateTime       @updatedAt
  createdAt    DateTime       @default(now())
  requests     WorkerRequest[]
  region       String
  capacity     Int            @default(1)
}

model WorkerRequest {
  id           String         @id @default(uuid())
  instance     WorkerInstance @relation(fields: [instanceId], references: [id])
  instanceId   String
  project      Project        @relation(fields: [projectId], references: [id])
  projectId    String
  status       RequestStatus  @default(PENDING)
  startedAt    DateTime       @default(now())
  completedAt  DateTime?
  prompt       Prompt?        @relation(fields: [promptId], references: [id])
  promptId     String?        @unique  // Critical fix
}

model Prompt {
  id        String   @id @default(uuid())
  content   String
  type      PromptType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  request   WorkerRequest? // Optional but recommended
}

// Keep your existing models below
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[]
}

model Project {
  id          String   @id @default(uuid())
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  prompts     Prompt[]
  actions     Action[]
  requests    WorkerRequest[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}


model Action {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  content   String
  projectId String
}

enum PromptType {
  USER
  SYSTEM
}